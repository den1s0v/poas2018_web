17.11.2018
==========

meteor.com : фреймворк для nodejs

Установка
https://www.meteor.com/install

https://chocolatey.org/install#completely-offline-install
<AdminShell>
cmd>@ Set-ExecutionPolicy Bypass -Scope Process -Force; iwr https://chocolatey.org/install.ps1 -UseBasicParsing | iex

cmd>choco install meteor
(160-180 Мб)

* движок V8 написан не по канонам транслятора (синтаксис - семантика - ...), а на огромном switch-case,
благодаря чему JS работает на нем очень быстро.

* Express по сути не фреймворк, а библиотечка для роутинга.

* meteor - фреймворк "всё из коробки"
  - подобные полнофункциональные (монолитные) фреймворки потихоньку загибаются (идут на спад)
  meteor: 
  - полная интеграция с MongoDB
  - единственный полноценный фреймворк под nodejs
  - atmosphere.js - пакеты для meteor

* React - только front-end, View (js).
	После него по популярности Angular и ~View~ (шаблонизаторы).

  
* GraphQL - язык запросов к API
	https://www.graphql.org/
	* в обычном API часто приходится добавлять новые точки доступа с похожим функционалом
	* спец. язык GraphQL позволяет задать только те поля, которые нужны.
-


MEteor
=\===========
создание приложения типа react из шаблона
meteor create --react todo-app

.jsx - расширенный синтаксис, позволяющий xml-подобные вставки



Babeljs.io - транслЯтор нового JS на старый JS длЯ поддержки старых браузеров


21.11.2018
==========

* JS V8 использует JIT-компиляцию для ускорения

Cегодня немного про React (reactjs.org)

Самые популярные CSS-libraries:
- bootstrap
- materialize design 	materializecss.com 	(расчитан на мобильные устр)
- ui kit
- semantic ui	semantic-ui.com 	react.semantic-ui.com (среднее мжд десктопными и мобильными стилями)

reactjs.org
Разделы сайта: >Get Started< Tutorials
.jsx === javascript XML (XML строже, чем HTML)

virtual DOM реакта -- копия DOM-дерева в js-объекте

render() меняет виртуальный DOM, а потом сравнивает новый виртуальный DOM ос старым и разницу посылает (отрисовывает) в браузер.

React - библиотечка для работы с рендерингом html-элементов.
React vs Angular:
простота - полноценное "всё из коробки" для форнтэнда
большое комьюнити - ...



* Webpack - сборщик js-модулей в 1 файл по включениям (import преобразуется в require и по ним собирается воедино)
- чтобы поом разом отправлять в babel
Webpack получает корневой файл на вход и по зависимостям из него выполняет сборку


> npm i -D webpack
> npm i -D webpack-cli

civnote.ru/projects/web/wiki/Введение_в_ ...

24.11.2018
========

installation babel
babel.io?
\See http://babeljs.io/docs/usage/cli/ for setup instructions.
install presets for babel
...
npm i -D @babel<*>
/cli
/core
/polyfill
/preset-env
/preset-react

,
babel-loader # loads to translate .js model



Webpack bundles only filed into one, Babel translates JS code into older versions only.
We use them together.

also 
npm i react react-dom

2 processes for gulp & webpack in terminals.
Moving to webpack
npm i -D webpack-stream

npm i -D style-loader css-loader
- importing css styles to .js files


==============================
1/12/2018

// автоматически сгенерировать приложение на React

npx create-react-app react-test


package.json:
: указаниЯ бабелю о поддерживаемых браузерах
  "browserslist": [
    ">0.2%",
    "not dead",
    "not ie <= 11",
    "not op_mini all"
  ]

: ‹интовщик: контроль стилистики кода и пре-компилировочный анализ кода ()
  "eslintConfig": {
    "extends": "react-app"
  },

: serviceWorker: технологиЯ кешировать всЮ веб-приложение целиком,
	а также кешировать запросы к серверу (в режиме оффлайн)
	
manifest: длЯ иконок рабочего стола на андроиде

* pva-приложение : на все платформы сразу
https://whatwebcando.today
* react-native: парсит и преобразовывает в native компоненты

* webpack-dev-server: виртуализирует файлы проекта (в виртуальной памЯти)


npm run build : построить проект длЯ загрузки на статический сервер

JSX:

jsx jsx ... jsx  { js code => value }  jsx jsx ... jsx


3 commits ...


React Bootstrap: react-bootstrap.netlify.com/

npm install react-bootstrap@next bootstrap

‚ React все компоненты начинаютсЯ с большой буквы!

поднЯтие специфичности длЯ переопределениЯ стилей другими (своими)

.btn-pink =>

button.btn-pink { ... }
.btn-pink.btn-pink.btn-pink.btn-pink { ... }

переопределение стилей, описанных на самом элементе стилем класса:

.mystyle {
 <...> !important;
}


* react-router 
(github -> docs https://reacttraining.com/react-router/web/guides/quick-start )

npm install react-router-dom 


* Џолиморфное приложение:
серверный рендеринг js  на сервере и отправка чистого html клиенту


========= 11.12.2018 ===========
’ема: ЂвторизациЯ через соцсети

1. Google
OAuth 2.0
https://developers.google.com/identity/sign-in/web/sign-in
	To create a Google API Console project and client ID, click the following button: ...
	
1) специальный jwt-токен, который возвращаетсЯ формой регистрации Google
2) нужно с сервера запросить из Google спец. ~def~ -токен, которым нужно проверить (расшифровать) первый jwt-токен
3) рег-ем польз-дЯ и  выдаЮм ему собственный jwt-токен

(пример) passportjs.org  использует "стратегии" авторизации на разных сервисах

Google Console API
https://console.developers.google.com/apis/dashboard?pli=1

зарегистрировались: https://console.developers.google.com/apis/credentials/oauthclient/289814883390-vqr4kc66i7e4n5urmahi4orl79ppdrhs.apps.googleusercontent.com?project=loginservice-225211

€дентификатор клиента	
289814883390-vqr4kc66i7e4n5urmahi4orl79ppdrhs.apps.googleusercontent.com
‘екрет клиента	
yq2NedJIdRANxjLUMCFarXqr
„ата созданиЯ	
11 дек. 2018 г., 14:02:09
Ќазвание regexp web
...


https://www.npmjs.com/package/react-social-buttons
npm install react-social-login-buttons -D


npm i -D @babel/plugin-~~proposal-class-properties~~

Refs and the DOM : получение ссылок на компоненты
https://reactjs.org/docs/refs-and-the-dom.html


Using a Google API Client Library
https://developers.google.com/identity/sign-in/web/backend-auth
npm install google-auth-library --save


15/12/2018

€збавлЯемсЯ от gulp`а € прокси browser-sync, чтобы клиент и сервер были на одном порту.
Џереходим к частичному обновлению страницы (самый писк)

install node.js package:
webpack-dev-middleware

переименовать src -> client:
командой 
$ git mv src/ client/
сделать более правильную историю git`а

Ќовые пакеты webpack:
npm i -D html-webpack-plugin file-loader webpack-hot-middleware react-hot-loader

// webpack-dev-middleware: сборка файлов проекта на одном порту
// webpack-hot-middleware: обновлЯет кусочек страницы на клиенте

Џереписываем webpack...
у нас будет примерно как  react-create-app,  только круче (более гибко и конфигурируемо).
‚ development режиме файлы js будут хранитьсЯ

------------ webpack-config-js ---- line 2 ------------
const  HtmlWebpackPlugin = require('html-webpack-plugin');

------------ client/index.js ---- line 2 ------------
удалить  тег <script ...> bundle.js

------------ webpack-config.js ---- самый низ ------------
...
	plugins: [
		new HtmlWebpackPlugin({
			inject: true, // скрипт будет вставлен в конец  body
			template: 'client/index.html' // сюда попадут собранные скрипты
		})
	]
}

------------ server.js ---- line 12 ------------
закомм. const PublicDir
------------ server.js ---- line 10 ------------
const  webpack = require('webpack');
const  WebpackDevMiddleware = require('webpack-dev-middleware');
const  webpackConfig = require('./webpack.config');
const  compiler = webpack('webpackConfig');
app.use(WebpackDevMiddleware(compiler, {
	publicPath: webpackConfig.output.publicPath  // вид  url  в браузере
	}))

------------ webpack-config.js ---- line 11-12 ------------
output:
{
	...
	publicPath: '/'		// +
}


------------ gulpfile ---- line 21 ------------
copy cmdline "--inspect --ignore public/ --ignore node_modules/ --ignore gulpfile.js server.js --port "

------------ package.json ---- line 9-9 ------------
dev: "nodemon ... (добавить --ignore client/ )"
в итоге:
dev: " --inspect --ignore public/ --ignore client/ --ignore node_modules/ --ignore gulpfile.js server.js --port "

теперь запуск проекта не через gulp, а 
$ npm run dev

------------ google-auth-service.js ---- line 21 ------------
закомментировать // verify().catch(console.error);

------------ server.js ---- line 23 ------------
заменить  app.listen(4000);  ->  app.listen(3000);

запуск... ЋЉ!

------------ webpack-config.js ---- line 3 ------------
const  webpack = require('webpack');
------------ webpack-config.js ---- line 9 ------------

exports = {
	...,
	entry [
		'webpack-hot-middleware/client',
		'./client/index.js'
	],
	...
}

------------ server.js ---- line 12 ------------
const  WebpackHotMiddleware = require('webpack-hot-middleware');
------------ server.js ---- line 14 ------------
app.use(WebpackHotMiddleware(compiler, {
	reload: true  // обновить страницу зависнет компилЯциЯ (затыр webpack`а)
	}))
// перед  app.use(WebpackDevMiddleware(compiler, 


------------ .babelrc ---- line 2 ------------
{
  "presets": ["@babel/preset-env", "@babel/preset-react"]
	"plugins": ["...","<новый компонент>"]
}

------------ App.js ---- line 3,16 ------------
import { hot } from 'react-hot-loader/root'
...
export default hot (App); // посл. в файле


-- работает динамическое выборочное изменение (обновление) компонентов

hot loader: обновление компонентов по слоту  componentDidUpdate().
‘лот  componentDidMount() вызываетсЯ единожды при отрисовке компонента, т.е. при первом помещении его на страницу.
Props`ы пробрасываютсЯ с объемлющих компонентов, и вызываетсЯ обновление.

*> длЯ кнопок со ссылками правильнее использовать тег <a>, длЯ кнопок с действиЯми - <button>


‘ервернаЯ аутентификациЯ
========================

------------ server.js ---- line (+) 34 ------------
const googleTest(req, res, next) {
	const userInfo = req.userInfo;
	res.json(userInfo);
}
...
app.post('', );

------------ google-auth-service.js ---- line 12 ------------
req.userInfo = payload; // 12
next(); // 14
// const userid = payload[]...  // закомм.

------------ GoogleButton.js ---- line (+) 21-27 ------------
				var myHeaders = new Headers();
				myHeaders.append("Content-Type", "application/json");
				var id_token = ...
				fetch('/api/auth/google', {
					method: 'POST',
					body: JSON.stringify({token: id_token}),
					headers: myHeaders
				}).then(response => response.json()).then(userInfo => {
					alert(JSON.stringify(userInfo, null, 2));
				});
				
------------ UsersController.js ---- line (+) 24-31 ------------
async function CreateGoogleUser(request, response, next, User) {
	const userInfo = request.userInfo;
	const newUser = {
		login: ,
		email: ,
		passwordHash: '',
		private: false,
		isAdmin: false
	}
	await User.save(newUser).then(user => {
		console.log('The new user saved to DB!');
		response.json(user.ops);
		next();
	})
}


19/12/18
=======================
схема: поле  _id
уникальные поля

DSL - domain specific language

> снова используем gulp для отслеживания измененмя схемы БД

ещё нужно переменовать user-schema -> users-schema

